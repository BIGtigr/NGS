#!/usr/bin/env python
# -*- coding: utf-8 -*-
#from __future__ import division, with_statement
'''
Copyright 2013, 陈同 (chentong_biology@163.com).  
===========================================================
'''
__author__ = 'chentong & ct586[9]'
__author_email__ = 'chentong_biology@163.com'
#=========================================================
desc = '''
Functional description:
    This is designed to remove duplicate genes generated by
    Microarray.
'''

import sys
import os
from json import dumps as json_dumps
from time import localtime, strftime 
timeformat = "%Y-%m-%d %H:%M:%S"
from optparse import OptionParser as OP
#from multiprocessing.dummy import Pool as ThreadPool

def fprint(content):
    print json_dumps(content,indent=1)

def cmdparameter(argv):
    if len(argv) == 1:
        global desc
        print >>sys.stderr, desc
        cmd = 'python ' + argv[0] + ' -h'
        os.system(cmd)
        sys.exit(1)
    usages = "%prog -i file"
    parser = OP(usage=usages)
    parser.add_option("-i", "--input-file", dest="filein",
        metavar="FILEIN", help="Gene expression matrix generated \
by microarray or other high-throughtput technologies.")
    parser.add_option("-c", "--col", dest="val_col",
        help="The number of the column containing the values \
to be compared. 1-based.")
    parser.add_option("-C", "--consist", dest="constist_col",
        help="The number of the column containing the values \
to check consistency. Here consistency means all up-regualte \
or all down-regulate. 1-based.")
    parser.add_option("-p", "--process-consist", dest="process_consist",
        help="The threshold to start consistent process. \
Default 0.05 (for p-value only).")
    parser.add_option("-a", "--average", dest="average",
        help="If only two groups, the programs can compare the \
average values of these two groups. \
A string like '2-4.5-7' would tell the program that column 2 to 4 \
belong to one group and 5 to 7 belong to the other group.")
    parser.add_option("-k", "--keepLarge", dest="keepLarge",
        default=1, help="Default 1 meaning keep duplicated \
genes with larger values. Accept 0 to keep duplicated genes \
with smaller values.")
    parser.add_option("-H", "--header", dest="header",
        default=1, help="Default 1 header line. Accept an integer \
to specify other number of header lines.")
    parser.add_option("-v", "--verbose", dest="verbose",
        default=0, help="Show process information")
    parser.add_option("-d", "--debug", dest="debug",
        default=False, help="Debug the program")
    (options, args) = parser.parse_args(argv[1:])
    assert options.filein != None, "A filename needed for -i"
    return (options, args)
#--------------------------------------------------------------------

def getDiff(lineL, col_grp):
    s1_start = col_grp[0][0]
    s1_end   = col_grp[0][1]
    s2_start = col_grp[1][0]
    s2_end   = col_grp[1][1]
    s1_len = s1_end - s1_start
    s2_len = s2_end - s2_start
    s1_ave = sum([float(i) for i in lineL[s1_start:s1_end]]) / s1_len
    s2_ave = sum([float(i) for i in lineL[s2_start:s2_end]]) / s2_len
    return s1_ave - s2_ave
#--------------------------------------------------------------------

def main():
    options, args = cmdparameter(sys.argv)
    #-----------------------------------
    file = options.filein
    if options.val_col:
        val_col = int(options.val_col) - 1
    else:
        val_col = ''
    if options.average:
        col_grp = [ [int(i.split('-')[0])-1,  int(i.split('-')[1])] for i in options.average.split('.')]
    else:
        col_grp = ''
    #------------------------------------------
    if options.constist_col:
        consistent = int(options.constist_col) - 1
        const_threshold = float(options.process_consist)
    keepLarge = int(options.keepLarge)
    header  = int(options.header)
    verbose = options.verbose
    debug = options.debug
    #-----------------------------------
    if file == '-':
        fh = sys.stdin
    else:
        fh = open(file)
    #--------------------------------
    aDict = {}
    for line in fh:
        if header:
            print line,
            header -= 1
            continue
        #---------------------------
        lineL = line.split()
        if col_grp:
            lastVal = getDiff(lineL, col_grp)
            lineL.append(lastVal)
        key = lineL[0]
        if key not in aDict:
            aDict[key] = lineL
        else:
            if val_col:
                curVal = float(lineL[val_col])
                lastVal = float(aDict[key][val_col])
                if keepLarge:
                    if curVal >= const_threshold and \
                        lastVal >= const_threshold:
                        if float(lineL[consistent]) * float(aDict[key][consistent]):
                            print '**%s' % key
                else:
                    if curVal <= const_threshold and \
                        lastVal <= const_threshold:
                        if float(lineL[consistent]) * float(aDict[key][consistent]):
                            print '**%s' % key
                #----------------------------
                if keepLarge and curVal > lastVal:
                    aDict[key] = lineL
                elif (not keepLarge) and curVal < lastVal:
                    aDict[key] = lineL
            elif col_grp:
                curVal = lineL[-1]
                lastVal = aDict[key][-1]
                if curVal * lastVal < 0:
                    print >>sys.stderr, '**%s' % key
                if keepLarge and ((curVal > lastVal > 0) or (curVal < lastVal < 0)):
                    aDict[key] = lineL
                elif (not keepLarge) and ((0 < curVal < lastVal) or (0>curVal>lastVal)):
                    aDict[key] = lineL
        #----------------------------------------------------------------------------------
    #-------------END reading file----------
    #----close file handle for files-----
    if file != '-':
        fh.close()
    #-----------end close fh-----------
    #-----------sort and print-----------
    lineL = aDict.values()
    if val_col:
        if keepLarge:
            lineL.sort(key=lambda a: -1 * float(a[val_col]))
        else:
            lineL.sort(key=lambda a: float(a[val_col]))
        #--------------------------------------------------
        for line in lineL:
            print '\t'.join(line)
    elif col_grp:
        if keepLarge:
            lineL.sort(key=lambda a: -1 * abs(a[-1]))
        else:
            lineL.sort(key=lambda a: abs(a[-1]))
        #------------------------------------
        for line in lineL:
            print '\t'.join(line[:-1])
    #------------------------------------------
    ###--------multi-process------------------
    #pool = ThreadPool(5) # 5 represents thread_num
    #result = pool.map(func, iterable_object)
    #pool.close()
    #pool.join()
    ###--------multi-process------------------
    if verbose:
        print >>sys.stderr,\
            "--Successful %s" % strftime(timeformat, localtime())

if __name__ == '__main__':
    startTime = strftime(timeformat, localtime())
    main()
    endTime = strftime(timeformat, localtime())
    fh = open('python.log', 'a')
    print >>fh, "%s\n\tRun time : %s - %s " % \
        (' '.join(sys.argv), startTime, endTime)
    fh.close()
    ###---------profile the program---------
    #import profile
    #profile_output = sys.argv[0]+".prof.txt")
    #profile.run("main()", profile_output)
    #import pstats
    #p = pstats.Stats(profile_output)
    #p.sort_stats("time").print_stats()
    ###---------profile the program---------


